//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace YourSensei.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class YourSensei_DBEntities : DbContext
    {
        public YourSensei_DBEntities()
            : base("name=YourSensei_DBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BookCategory> BookCategories { get; set; }
        public virtual DbSet<BookRead> BookReads { get; set; }
        public virtual DbSet<CompanyDetail> CompanyDetails { get; set; }
        public virtual DbSet<CompanyLibraryBookLog> CompanyLibraryBookLogs { get; set; }
        public virtual DbSet<CompanyLibraryBookLogTransaction> CompanyLibraryBookLogTransactions { get; set; }
        public virtual DbSet<CompanyLibraryBook> CompanyLibraryBooks { get; set; }
        public virtual DbSet<CreditLog> CreditLogs { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<InitialAssessmentAnswer> InitialAssessmentAnswers { get; set; }
        public virtual DbSet<InitialAssessmentCategory> InitialAssessmentCategories { get; set; }
        public virtual DbSet<InitialAssessmentOption> InitialAssessmentOptions { get; set; }
        public virtual DbSet<InitialAssessmentQuestion> InitialAssessmentQuestions { get; set; }
        public virtual DbSet<Member> Members { get; set; }
        public virtual DbSet<Mentor> Mentors { get; set; }
        public virtual DbSet<MentorCompanyMapping> MentorCompanyMappings { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<QuestionOption> QuestionOptions { get; set; }
        public virtual DbSet<Quiz> Quizs { get; set; }
        public virtual DbSet<QuizAnswerAssessment> QuizAnswerAssessments { get; set; }
        public virtual DbSet<QuizBookMapping> QuizBookMappings { get; set; }
        public virtual DbSet<TechnicalSupport> TechnicalSupports { get; set; }
        public virtual DbSet<TrainingEventAttendee> TrainingEventAttendees { get; set; }
        public virtual DbSet<TrainingEventFormat> TrainingEventFormats { get; set; }
        public virtual DbSet<UserCategory> UserCategories { get; set; }
        public virtual DbSet<UserDetail> UserDetails { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<CompanySetting> CompanySettings { get; set; }
        public virtual DbSet<TrainingEvent> TrainingEvents { get; set; }
        public virtual DbSet<TrainingEventA3Diagram> TrainingEventA3Diagram { get; set; }
        public virtual DbSet<A3TrainingEventCommunication> A3TrainingEventCommunication { get; set; }
        public virtual DbSet<SubscriptionPlan> SubscriptionPlans { get; set; }
        public virtual DbSet<SubscriptionPlanHistory> SubscriptionPlanHistories { get; set; }
        public virtual DbSet<Subscription> Subscriptions { get; set; }
        public virtual DbSet<WorkQueue> WorkQueues { get; set; }
        public virtual DbSet<PaymentCardDetail> PaymentCardDetails { get; set; }
        public virtual DbSet<BeltRuleLog> BeltRuleLogs { get; set; }
        public virtual DbSet<BeltRuleLogTransaction> BeltRuleLogTransactions { get; set; }
        public virtual DbSet<BeltRule> BeltRules { get; set; }
        public virtual DbSet<BeltAchievementLog> BeltAchievementLogs { get; set; }
        public virtual DbSet<SubscriptionTransaction> SubscriptionTransactions { get; set; }
        public virtual DbSet<TrainingEventKaizenDiagram> TrainingEventKaizenDiagrams { get; set; }
        public virtual DbSet<EmailWorkQueue> EmailWorkQueues { get; set; }
        public virtual DbSet<BookTrackCategory> BookTrackCategories { get; set; }
        public virtual DbSet<QuizStatu> QuizStatus { get; set; }
    
        public virtual ObjectResult<usp_GetMentorByIsActive_Result> usp_GetMentorByIsActive(Nullable<System.Guid> companyID, Nullable<bool> isActive)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(System.Guid));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetMentorByIsActive_Result>("usp_GetMentorByIsActive", companyIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetRegistrationDetails_Result> usp_GetRegistrationDetails(Nullable<bool> isApproved, Nullable<bool> isRejected)
        {
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var isRejectedParameter = isRejected.HasValue ?
                new ObjectParameter("IsRejected", isRejected) :
                new ObjectParameter("IsRejected", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetRegistrationDetails_Result>("usp_GetRegistrationDetails", isApprovedParameter, isRejectedParameter);
        }
    
        public virtual ObjectResult<usp_GetCreditLogsByUserDetailID_Result> usp_GetCreditLogsByUserDetailID(Nullable<System.Guid> userDetailID, Nullable<bool> isActive)
        {
            var userDetailIDParameter = userDetailID.HasValue ?
                new ObjectParameter("UserDetailID", userDetailID) :
                new ObjectParameter("UserDetailID", typeof(System.Guid));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCreditLogsByUserDetailID_Result>("usp_GetCreditLogsByUserDetailID", userDetailIDParameter, isActiveParameter);
        }
    }
}
